from web_apps.llm.utils import extract_code
import traceback
from utils.common_utils import get_now_time


class DataChatAgent:
    def __init__(self, llm, reader, retry=3):
        self.llm = llm
        self.reader = reader
        self.question = ''
        self.last_code_executed = ''
        self.code_exception = ''
        self.max_retry = retry
        self.info_prompt = ''
        self.question = ''

    def gen_info_prompt(self):
        '''
        生成信息提示
        :return:
        '''
        if self.info_prompt == '':
            self.info_prompt = self.reader.get_info_prompt(self.question)
        # if len(info_prompt) > self.max_tokens:
        #     # 提示过长，使用llm判断需要取哪些模型提示信息
        #     prompt = f"""你是一个数据读取器，
        #     """
        return self.info_prompt

    def generate_code(self, prompt):
        result_example_prompt = '{ "type": "string", "value": "100" } or { "type": "dataframe", "value": pd.DataFrame({...}) } or { "type": "html", "value": line.render_embed() }'
        prompt = f"""
我有一个数据读取对象reader，对象信息为：
{self.gen_info_prompt()}

Update this initial code:
```python
# TODO: import the required dependencies

# Write code here

# Declare result var: 
type (possible values "string", "dataframe", "html"). Example: {result_example_prompt}

```

### QUERY

{prompt}

Variable `reader` is already declared.

At the end, declare "result" variable as a dictionary of type and value.

If you are asked to plot a chart, use "pyecharts" for charts, use the render_embed() function to return the corresponding html type and the html content value.

Generate python code and return full updated code:
生成代码前请使用中文解释大致逻辑
"""
        self.llm_result = self.llm(prompt)
        code = extract_code(self.llm_result)
        return code

    def fix_code(self):
        '''
        使用llm修正错误代码
        :return:
        '''
        fix_code_prompt = f"""
我有一个数据读取对象reader，对象信息为：
{self.gen_info_prompt()}
The user asked the following question:
{self.question}
You generated this python code:
{self.last_code_executed}
the code running throws an exception:
{self.code_exception}
Fix the python code above and return the new python code
生成代码前请使用中文解释大致逻辑
        """
        self.llm_result = self.llm(fix_code_prompt)
        new_code = extract_code(self.llm_result)
        return new_code

    def execute_code(self, code: str):
        """
        Execute the python code generated by LLMs to answer the question
        about the input dataframe. Run the code in the current context and return the
        result.
        Args:
            code (str): Python code to execute.
            context (CodeExecutionContext): Code Execution Context
                    with prompt id and skills.
        Returns:
            Any: The result of the code execution. The type of the result depends
                on the generated code.
        """
        try:
            environment = {'reader': self.reader}
            exec(code, environment)
            self.last_code_executed = code
            if "result" not in environment:
                raise ValueError("No result returned")
            else:
                result = environment['result']
                return result
        except Exception as e:
            self.last_code_executed = code
            raise e

    def run(self, prompt):
        self.question = prompt
        code = self.generate_code(prompt)
        retry_count = 0
        result = None
        while retry_count <= self.max_retry:
            try:
                print(code)
                result = self.execute_code(code)
                break
            except Exception as e:
                traceback_errors = traceback.format_exc()
                self.code_exception = traceback_errors
                retry_count += 1
                code = self.fix_code()
        return result

    def parse_result(self, result):
        if result['type'] == 'html':
            return {'content': result['value'], 'type': 'html'}
        elif result['type'] == 'dataframe':
            df = result['value']
            df.fillna("", inplace=True)
            data_li = df.to_dict(orient='records')
            return {'content': data_li, 'type': 'data'}
        else:
            return {'content': result['value'], 'type': 'text'}

    def chat(self, prompt):
        self.question = prompt
        data = {'content': {'title': '生成处理代码', 'content': '开始生成处理代码', 'time': get_now_time(res_type='datetime')}, 'type': 'flow'}
        yield data
        code = self.generate_code(prompt)
        data = {'content': {'title': '处理代码生成成功', 'content': self.llm_result, 'time': get_now_time(res_type='datetime')}, 'type': 'flow'}
        yield data
        retry_count = 0
        result = None
        while retry_count <= self.max_retry:
            try:
                data = {'content': {'title': '执行处理代码', 'content': f"```python\n{code}\n```", 'time': get_now_time(res_type='datetime')}, 'type': 'flow'}
                yield data
                result = self.execute_code(code)
                data = {'content': {'title': '处理完成', 'content': '处理完成', 'time': get_now_time(res_type='datetime')}, 'type': 'flow'}
                yield data
                data = self.parse_result(result)
                yield data
                return result
            except Exception as e:
                traceback_errors = traceback.format_exc()
                self.code_exception = traceback_errors
                data = {'content': {'title': '执行代码出错，修复代码', 'content': f'执行代码报错：{self.code_exception}', 'time': get_now_time(res_type='datetime')}, 'type': 'flow'}
                yield data
                retry_count += 1
                code = self.fix_code()
                data = {'content': {'title': '修复处理代码成功', 'content': self.llm_result, 'time': get_now_time(res_type='datetime')}, 'type': 'flow'}
                yield data
        data = {'content': {'title': '处理失败', 'content': f'处理失败：{self.code_exception}', 'time': get_now_time(res_type='datetime')}, 'type': 'flow'}
        yield data
        return result
